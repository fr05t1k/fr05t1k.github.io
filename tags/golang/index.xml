<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on /etc/notes</title>
    <link>https://etcnotes.com/tags/golang/</link>
    <description>Recent content in Golang on /etc/notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/3.0/&#34;&gt;All rights reserved&lt;/a&gt;, 2019</copyright>
    <lastBuildDate>Sat, 21 Sep 2019 00:00:00 +0300</lastBuildDate>
    
	<atom:link href="https://etcnotes.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PPROF. Profiling Golang Applications.</title>
      <link>https://etcnotes.com/posts/pprof/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0300</pubDate>
      
      <guid>https://etcnotes.com/posts/pprof/</guid>
      <description>Setup Go Tools provide quite a lot of built-in instruments out of the box. Today we&amp;rsquo;re going to talk about one of them. Pprof - a built-in profiling tool. There are several ways how to use it. We will check the easiest one.
Check the full code example here.
First of all, we need to import default pprof http endpoints:
import ( _ &amp;quot;net/http/pprof&amp;quot; )  If you don&amp;rsquo;t use http in your application you can just run it standalone:</description>
    </item>
    
  </channel>
</rss>